{"ast":null,"code":"var _jsxFileName = \"/Users/hemantsingh/code/SCHwire1.1/schwire1811/src/components/SearchContainer.js\";\nimport React from 'react';\n// import SearchInput from './SearchInput';\n// import SearchResult from './SearchResult';\n// import UsualPage from \"./UsualPage\";\nimport { useState, useEffect } from 'react';\n// import { Manager } from 'socket.io-client'; \n\n// // let url='http://localhost:9900'\n// let url='https://alphalionserver.herokuapp.com'\n// const manager=new Manager(url)\n// const socket = manager.socket(\"/SCH\"); \n\n// const SearchContainer = () => {\n\n//     // socket.on(\"disconnect\",()=>{\n//     //     console.log(\"disconnect\");\n//     //     socket.emit(\"joinclient\",{\n//     //         id:\"hemant\"\n//     //     })\n//     // })\n\n//     // socket.on(\"connect\",()=>{\n//     //     console.log(\"connect\");\n\n//     //     socket.emit(\"joinclient\",{\n//     //         id:\"hemant\"\n//     //     })\n//     // })\n\n//     // socket.on(\"SCHDATA\",(data)=>{\n\n//     //     // console.log(\"changes in db\");\n//     //     // console.log(data);\n//     //     // console.log(\"datareal : \",data);\n//     //     // let jsondata=JSON.parse(data)\n//     //     // console.log(\"datarealJson : \",jsondata);\n\n//     //     setrealtimedata(data);\n//     //     setrealtime((old)=>1-old);\n//     // })\n\n//     // socket.on(\"SCHTRUCKDATA\",(data)=>{\n//     //     // console.log(\"truck data : \",data);\n//     // })\n\n//     let [realtimedata,setrealtimedata]=useState([]);\n//     let [inputleft, setInputLeft] = useState([\"\"]);\n//     let [inputright, setInputRight] = useState([\"\"]);\n//     let [realtime,setrealtime]=useState(0);\n\n//     const [button,setbutton]=useState(\"Expand\");\n\n//     // var [loads, setLoads] = useState([])\n//     // let [citydata, setCitydata] = useState();\n\n//     let [data, setData] = useState({ citydata: {}, loads: {},citytrucks:{}, trucks:{} });\n\n//     let belongs = async (arr, state) => { \n//         let found = false;\n\n//         arr.map((item) => { \n//             if(item!=''){\n//             let item1 = item.slice(0, 2);\n//             if (state == item1) {\n//                 found = true;\n//             }\n//         }\n//         })\n\n//         return found;\n//     }\n\n//     // const conditionFilter =  (loads) => {\n\n//     //     try{\n//     //         let filterdata = []; \n//     //          loads.map(async (el) =>{\n//     //             // console.log(el.data.shipper_state,\" , \",el.data.receiver_state);\n//     //             if (el.data.shipper_state == null || el.data.shipper_state == undefined || el.data.receiver_state == null || el.data.receiver_state == undefined) return;\n\n//     //             let left = await belongs(inputleft, el.data.shipper_state);\n//     //             let right = await belongs(inputright, el.data.receiver_state);\n\n//     //             if (left &&  right) { \n//     //                  filterdata.push(el);\n//     //             }\n\n//     //         })\n\n//     //         // console.log(\"left : \",inputleft);\n//     //         // console.log(\"rihgt : \",inputright);\n\n//     //         let truckfilter=[];\n//     //           trucksdata.map(async (el)=>{\n\n//     //             let found =await belongs(inputleft,el.loadData.receiver_state[0])\n\n//     //             if(found)\n//     //             {\n//     //                 console.log(\"state : \",el.loadData.receiver_state[0]);\n//     //                 truckfilter.push(el);\n//     //             }\n\n//     //         })\n\n//     //         return filterdata;\n//     //     }catch(err){\n//     //         return [];\n//     //     }\n//     //  }\n\n//      const conditionFilter = async (loads,trucks) => {\n\n//         console.log(\"loads : \",loads);\n//         console.log(\"trucks : \",trucks);\n\n//         if(loads==undefined || trucks==undefined){ \n//             let data={\n//                 loads:{},\n//                 trucks:{}\n//             }\n//             return data;\n//         }\n\n//         // return new Promise(async function(resolve,reject){\n//         try { \n//           let filterdata = [];\n\n//           await loads.map(async (el) => {\n//                 // console.log(el.data.shipper_state,\" , \",el.data.receiver_state);\n//                 if (el.data.shipper_state == null || el.data.shipper_state == undefined || el.data.receiver_state == null || el.data.receiver_state == undefined) return;\n\n//                 let left = await belongs(inputleft, el.data.shipper_state);\n//                 let right = await belongs(inputright, el.data.receiver_state);\n\n//                 if (left && right) {\n//                     filterdata.push(el);\n//                 }\n\n//             })\n\n//           let filtertrucks = [];\n\n//           await trucks.map(async (el) => {\n\n//             if (el.data==undefined || el.data.truckCurrentState==undefined || el.data.truckCurrentState.receiver_state == undefined) {\n//                     console.log(\"undef\");\n//                     return;\n//             }\n\n//             // console.log(\"re \", el.data.truckCurrentState.receiver_state[0]);\n\n//             let belong =await belongs(inputleft, el.data.truckCurrentState.receiver_state[0])\n\n//             if (belong) {\n//                 console.log(\"belongsssssss\");\n//                 filtertrucks.push(el);\n//             }\n\n//             })\n\n//             // console.log(\"left : \",inputleft);\n//             // console.log(\"rihgt : \",inputright);\n\n//             // let truckfilter = [];\n//             // trucksdata.map(async (el) => {\n\n//             //     let found = await belongs(inputleft, el.loadData.receiver_state[0])\n\n//             //     if (found) {\n//             //         console.log(\"state : \", el.loadData.receiver_state[0]);\n//             //         truckfilter.push(el);\n//             //     }\n\n//             // })\n//             console.log(\"trucks on func : \",filtertrucks);\n\n//           let data={\n//                 loads:filterdata,\n//                 trucks:filtertrucks\n//             }\n\n//           return data;\n\n//           // resolve(data);\n\n//         } \n//         catch (err) {\n\n//           console.log(\"this is returning from \");\n\n//           let data={\n//             loads:{},\n//             trucks:{}\n//            }\n\n//             return data;\n//             // reject(data);\n//         }\n//     //    })\n//   }\n\n//     useEffect(() => {\n//         console.log(\"data : for input change\");\n//         // console.log(\"daa \", data);\n//         if( data!=undefined && data.loads!=undefined && data.loads.length!=0)\n//         {\n//          console.log(\"data.trucks : \",data.trucks);\n//         conditionFilter(data.loads,data.trucks).then((condata)=>{\n//             console.log(\"task done\");\n\n//         console.log(\"condata : \",condata);\n\n//         if(condata!=undefined) {\n\n//         console.log(\"condata : \");\n//         console.log(\"condata : \",condata);\n\n//         setData({\n//             citydata:condata.loads,\n//             loads:data.loads,\n//             citytrucks:condata.trucks,\n//             trucks:data.trucks\n//         })\n\n//         }\n//            })\n//     }\n//     }, [inputleft, inputright])\n\n//     function Comparator(a, b) {\n//         if(a.data.PU_date == undefined) return -1;\n\n//         if(a.data.PU_date>= b.data.PU_date) return 1;\n//         else return -1;\n\n//     }\n\n//     async function sorted(arr) { \n//         return new Promise(async function (resolve, reject) {\n//             if(arr==undefined)\n//             {\n//              resolve(arr);\n//              return;   \n//             } \n//             let aar = await arr.sort(Comparator);\n//             resolve(aar);\n//         })\n//     }\n\n//     const update=async ()=>{\n//         // sorted(realtimedata).then(async (sorteddata) => { \n//             await conditionFilter(realtimedata,data.trucks).then((condata)=>{  \n//             // console.log(\"json : \",json[0]);\n\n//           let  JsonObject = JSON.parse(JSON.stringify(condata));\n\n//           console.log(\"JJJ : \",JsonObject);\n//             console.log(\"condata : \",condata);\n//             // console.log(\"typeof  : \", typeof condata);\n//             console.log(\"cacaasdc\");\n//             setData({\n//                 citydata:condata.trucks,\n//                 loads:realtimedata,\n//                 trucks:data.trucks,\n//                 citytrucks:data.citytrucks\n//             })\n//         })\n//         //    })\n//     }\n\n//     // useEffect(()=>{\n//     //     update()\n//     // },[realtime])\n\n//     const fetchData = () => {\n//         console.log(\"calling\");\n\n//         // let LoadsURL=\"https://alphalionserver.herokuapp.com/getloadsdata\"; \n\n//         let schdataURL=url+\"/getSCHdata\";\n\n//         fetch(schdataURL,{method:'POST'})\n//                 .then((res) => res.json())\n//                 .then(async (json) => {\n\n//                     let loads=json.loads;\n//                     let trucks=json.trucks;\n\n//                     console.log(\"loadsfet : \",loads);\n//                     console.log(\"trucksfet  : \",trucks);\n\n//                     let condata= await conditionFilter(loads,trucks)\n//                     // .then((data)=>{\n//                     //     condata=data;\n//                     // }).catch((errdata)=>{\n//                     //     condata=data;\n//                     // })\n\n//                     // setData({\n//                     //     citydata:condata,\n//                     //     loads:loads\n//                     // })\n\n//                     console.log(\"data.trucks : \",condata.trucks);\n\n//                     setData({\n//                         citydata:condata.loads,\n//                         loads:loads,\n//                         citytrucks:condata.trucks,\n//                         trucks:trucks\n//                     })\n\n//                     // console.log(\"data : \",data);\n\n//                     // let condata = conditionFilter(loads) \n//                  })\n\n//             // fetch(LoadsURL,{method:'POST'})\n//             //     .then((res) => res.json())\n//             //     .then(async (json) => { \n//             // //   sorted(json).then(async (sorteddata) => {\n//             //     // console.log(\"sorted :\",sorteddata)\n\n//             //     let condata = conditionFilter(json)  \n\n//             //     console.log(\"data23 : \",condata);\n\n//             //     setData({\n//             //         citydata:condata,\n//             //         loads:json,\n//             //     })\n\n//             // //    })\n//             //  })\n\n//         let TrucksURL=\"https://alphalionserver.herokuapp.com/gettruckssdata\"; \n\n//         // fetch(TrucksURL,{method:'POST'})\n//         // .then((res) => res.json())\n//         // .then(async (json) => { \n//         //     console.log(\"json : \",json);        \n//         // })\n\n//         // socket.emit(\"joinclient\",{id:'hemant'})\n\n//         // socket.on(\"joined\",(data)=>{\n//         //     console.log(\"socket data :\",data);\n\n//         //     socket.emit(\"getdata\",{id:'hemant'});\n//         // })\n\n//         // socket.on(\"setdata\",(data)=>{\n//         //     console.log(\"sch :\",data);\n//         // })\n\n//         // const colRef = collection(db, 'LoadEntries');\n//         // const unsubListener = onSnapshot(colRef, async snapshot => { \n//         //     let arr = [];\n//         //     await snapshot.docs.map(doc => { \n//         //         let obj = {\n//         //             id: doc.id,\n//         //             data: doc.data()\n//         //         };\n//         //         arr.push(obj)\n//         //     })\n//         //   await  sorted(arr).then((data) => {\n//         //         setLoads(data);\n//         //     })\n//         // });\n\n//     }\n\n//     // useEffect(() => {\n//     //     let condata = conditionFilter()\n\n//     //     // setCitydata(condata);\n\n//     //     console.log(\"changes in database\");\n\n//     // }, [loads])\n\n//     useEffect(() => {\n//         fetchData();\n//     }, []);\n\n//     return (\n//         <div className=\"SearchContainerbox\">\n//             <SearchInput setInputLeft={setInputLeft} inputleft={inputleft} inputright={inputright} setInputRight={setInputRight}></SearchInput>\n//             {/* <div className=\"expand-all-btn\">\n//               <button>{button}</button>\n//             </div> */}\n//             {/* <SearchResult citydata={data.citydata} inputcity={inputleft} trucks={data.citytrucks}></SearchResult> */}\n//             {/* <UsualPage loads={data.loads}></UsualPage> */}\n//         </div>\n//     );\n\n// }\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst s = () => {\n  console.log(\"this is by container\");\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"this is sample\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 413,\n    columnNumber: 9\n  }, this);\n};\nexport default s;","map":{"version":3,"names":["React","useState","useEffect","s","console","log"],"sources":["/Users/hemantsingh/code/SCHwire1.1/schwire1811/src/components/SearchContainer.js"],"sourcesContent":["import React from 'react'\r\n// import SearchInput from './SearchInput';\r\n// import SearchResult from './SearchResult';\r\n// import UsualPage from \"./UsualPage\";\r\nimport { useState, useEffect } from 'react';\r\n// import { Manager } from 'socket.io-client'; \r\n\r\n// // let url='http://localhost:9900'\r\n// let url='https://alphalionserver.herokuapp.com'\r\n// const manager=new Manager(url)\r\n// const socket = manager.socket(\"/SCH\"); \r\n\r\n// const SearchContainer = () => {\r\n\r\n//     // socket.on(\"disconnect\",()=>{\r\n//     //     console.log(\"disconnect\");\r\n//     //     socket.emit(\"joinclient\",{\r\n//     //         id:\"hemant\"\r\n//     //     })\r\n//     // })\r\n\r\n//     // socket.on(\"connect\",()=>{\r\n//     //     console.log(\"connect\");\r\n\r\n//     //     socket.emit(\"joinclient\",{\r\n//     //         id:\"hemant\"\r\n//     //     })\r\n//     // })\r\n\r\n//     // socket.on(\"SCHDATA\",(data)=>{\r\n        \r\n//     //     // console.log(\"changes in db\");\r\n//     //     // console.log(data);\r\n//     //     // console.log(\"datareal : \",data);\r\n//     //     // let jsondata=JSON.parse(data)\r\n//     //     // console.log(\"datarealJson : \",jsondata);\r\n\r\n//     //     setrealtimedata(data);\r\n//     //     setrealtime((old)=>1-old);\r\n//     // })\r\n\r\n//     // socket.on(\"SCHTRUCKDATA\",(data)=>{\r\n//     //     // console.log(\"truck data : \",data);\r\n//     // })\r\n\r\n//     let [realtimedata,setrealtimedata]=useState([]);\r\n//     let [inputleft, setInputLeft] = useState([\"\"]);\r\n//     let [inputright, setInputRight] = useState([\"\"]);\r\n//     let [realtime,setrealtime]=useState(0);\r\n\r\n//     const [button,setbutton]=useState(\"Expand\");\r\n\r\n\r\n//     // var [loads, setLoads] = useState([])\r\n//     // let [citydata, setCitydata] = useState();\r\n \r\n//     let [data, setData] = useState({ citydata: {}, loads: {},citytrucks:{}, trucks:{} });\r\n\r\n//     let belongs = async (arr, state) => { \r\n//         let found = false;\r\n\r\n//         arr.map((item) => { \r\n//             if(item!=''){\r\n//             let item1 = item.slice(0, 2);\r\n//             if (state == item1) {\r\n//                 found = true;\r\n//             }\r\n//         }\r\n//         })\r\n\r\n//         return found;\r\n//     }\r\n\r\n//     // const conditionFilter =  (loads) => {\r\n\r\n//     //     try{\r\n//     //         let filterdata = []; \r\n//     //          loads.map(async (el) =>{\r\n//     //             // console.log(el.data.shipper_state,\" , \",el.data.receiver_state);\r\n//     //             if (el.data.shipper_state == null || el.data.shipper_state == undefined || el.data.receiver_state == null || el.data.receiver_state == undefined) return;\r\n    \r\n//     //             let left = await belongs(inputleft, el.data.shipper_state);\r\n//     //             let right = await belongs(inputright, el.data.receiver_state);\r\n    \r\n//     //             if (left &&  right) { \r\n//     //                  filterdata.push(el);\r\n//     //             }\r\n\r\n//     //         })\r\n\r\n//     //         // console.log(\"left : \",inputleft);\r\n//     //         // console.log(\"rihgt : \",inputright);\r\n            \r\n//     //         let truckfilter=[];\r\n//     //           trucksdata.map(async (el)=>{\r\n\r\n//     //             let found =await belongs(inputleft,el.loadData.receiver_state[0])\r\n\r\n//     //             if(found)\r\n//     //             {\r\n//     //                 console.log(\"state : \",el.loadData.receiver_state[0]);\r\n//     //                 truckfilter.push(el);\r\n//     //             }\r\n\r\n//     //         })\r\n      \r\n//     //         return filterdata;\r\n//     //     }catch(err){\r\n//     //         return [];\r\n//     //     }\r\n//     //  }\r\n\r\n//      const conditionFilter = async (loads,trucks) => {\r\n\r\n//         console.log(\"loads : \",loads);\r\n//         console.log(\"trucks : \",trucks);\r\n\r\n//         if(loads==undefined || trucks==undefined){ \r\n//             let data={\r\n//                 loads:{},\r\n//                 trucks:{}\r\n//             }\r\n//             return data;\r\n//         }\r\n\r\n//         // return new Promise(async function(resolve,reject){\r\n//         try { \r\n//           let filterdata = [];\r\n\r\n//           await loads.map(async (el) => {\r\n//                 // console.log(el.data.shipper_state,\" , \",el.data.receiver_state);\r\n//                 if (el.data.shipper_state == null || el.data.shipper_state == undefined || el.data.receiver_state == null || el.data.receiver_state == undefined) return;\r\n\r\n//                 let left = await belongs(inputleft, el.data.shipper_state);\r\n//                 let right = await belongs(inputright, el.data.receiver_state);\r\n\r\n//                 if (left && right) {\r\n//                     filterdata.push(el);\r\n//                 }\r\n\r\n//             })\r\n\r\n//           let filtertrucks = [];\r\n\r\n//           await trucks.map(async (el) => {\r\n\r\n//             if (el.data==undefined || el.data.truckCurrentState==undefined || el.data.truckCurrentState.receiver_state == undefined) {\r\n//                     console.log(\"undef\");\r\n//                     return;\r\n//             }\r\n\r\n//             // console.log(\"re \", el.data.truckCurrentState.receiver_state[0]);\r\n\r\n//             let belong =await belongs(inputleft, el.data.truckCurrentState.receiver_state[0])\r\n\r\n//             if (belong) {\r\n//                 console.log(\"belongsssssss\");\r\n//                 filtertrucks.push(el);\r\n//             }\r\n\r\n//             })\r\n\r\n//             // console.log(\"left : \",inputleft);\r\n//             // console.log(\"rihgt : \",inputright);\r\n\r\n//             // let truckfilter = [];\r\n//             // trucksdata.map(async (el) => {\r\n\r\n//             //     let found = await belongs(inputleft, el.loadData.receiver_state[0])\r\n\r\n//             //     if (found) {\r\n//             //         console.log(\"state : \", el.loadData.receiver_state[0]);\r\n//             //         truckfilter.push(el);\r\n//             //     }\r\n\r\n//             // })\r\n//             console.log(\"trucks on func : \",filtertrucks);\r\n\r\n//           let data={\r\n//                 loads:filterdata,\r\n//                 trucks:filtertrucks\r\n//             }\r\n\r\n//           return data;\r\n\r\n//           // resolve(data);\r\n\r\n//         } \r\n//         catch (err) {\r\n\r\n//           console.log(\"this is returning from \");\r\n\r\n//           let data={\r\n//             loads:{},\r\n//             trucks:{}\r\n//            }\r\n\r\n//             return data;\r\n//             // reject(data);\r\n//         }\r\n//     //    })\r\n//   }\r\n\r\n//     useEffect(() => {\r\n//         console.log(\"data : for input change\");\r\n//         // console.log(\"daa \", data);\r\n//         if( data!=undefined && data.loads!=undefined && data.loads.length!=0)\r\n//         {\r\n//          console.log(\"data.trucks : \",data.trucks);\r\n//         conditionFilter(data.loads,data.trucks).then((condata)=>{\r\n//             console.log(\"task done\");\r\n        \r\n//         console.log(\"condata : \",condata);\r\n\r\n//         if(condata!=undefined) {\r\n\r\n//         console.log(\"condata : \");\r\n//         console.log(\"condata : \",condata);\r\n\r\n//         setData({\r\n//             citydata:condata.loads,\r\n//             loads:data.loads,\r\n//             citytrucks:condata.trucks,\r\n//             trucks:data.trucks\r\n//         })\r\n        \r\n\r\n//         }\r\n//            })\r\n//     }\r\n//     }, [inputleft, inputright])\r\n\r\n//     function Comparator(a, b) {\r\n//         if(a.data.PU_date == undefined) return -1;\r\n\r\n//         if(a.data.PU_date>= b.data.PU_date) return 1;\r\n//         else return -1;\r\n\r\n//     }\r\n\r\n//     async function sorted(arr) { \r\n//         return new Promise(async function (resolve, reject) {\r\n//             if(arr==undefined)\r\n//             {\r\n//              resolve(arr);\r\n//              return;   \r\n//             } \r\n//             let aar = await arr.sort(Comparator);\r\n//             resolve(aar);\r\n//         })\r\n//     }\r\n\r\n//     const update=async ()=>{\r\n//         // sorted(realtimedata).then(async (sorteddata) => { \r\n//             await conditionFilter(realtimedata,data.trucks).then((condata)=>{  \r\n//             // console.log(\"json : \",json[0]);\r\n\r\n//           let  JsonObject = JSON.parse(JSON.stringify(condata));\r\n\r\n//           console.log(\"JJJ : \",JsonObject);\r\n//             console.log(\"condata : \",condata);\r\n//             // console.log(\"typeof  : \", typeof condata);\r\n//             console.log(\"cacaasdc\");\r\n//             setData({\r\n//                 citydata:condata.trucks,\r\n//                 loads:realtimedata,\r\n//                 trucks:data.trucks,\r\n//                 citytrucks:data.citytrucks\r\n//             })\r\n//         })\r\n//         //    })\r\n//     }\r\n\r\n//     // useEffect(()=>{\r\n//     //     update()\r\n//     // },[realtime])\r\n\r\n//     const fetchData = () => {\r\n//         console.log(\"calling\");\r\n\r\n//         // let LoadsURL=\"https://alphalionserver.herokuapp.com/getloadsdata\"; \r\n        \r\n//         let schdataURL=url+\"/getSCHdata\";\r\n\r\n//         fetch(schdataURL,{method:'POST'})\r\n//                 .then((res) => res.json())\r\n//                 .then(async (json) => {\r\n\r\n//                     let loads=json.loads;\r\n//                     let trucks=json.trucks;\r\n\r\n//                     console.log(\"loadsfet : \",loads);\r\n//                     console.log(\"trucksfet  : \",trucks);\r\n                    \r\n//                     let condata= await conditionFilter(loads,trucks)\r\n//                     // .then((data)=>{\r\n//                     //     condata=data;\r\n//                     // }).catch((errdata)=>{\r\n//                     //     condata=data;\r\n//                     // })\r\n                    \r\n\r\n//                     // setData({\r\n//                     //     citydata:condata,\r\n//                     //     loads:loads\r\n//                     // })\r\n\r\n//                     console.log(\"data.trucks : \",condata.trucks);\r\n\r\n\r\n//                     setData({\r\n//                         citydata:condata.loads,\r\n//                         loads:loads,\r\n//                         citytrucks:condata.trucks,\r\n//                         trucks:trucks\r\n//                     })\r\n\r\n//                     // console.log(\"data : \",data);\r\n\r\n\r\n//                     // let condata = conditionFilter(loads) \r\n//                  })\r\n\r\n//             // fetch(LoadsURL,{method:'POST'})\r\n//             //     .then((res) => res.json())\r\n//             //     .then(async (json) => { \r\n//             // //   sorted(json).then(async (sorteddata) => {\r\n//             //     // console.log(\"sorted :\",sorteddata)\r\n\r\n//             //     let condata = conditionFilter(json)  \r\n\r\n//             //     console.log(\"data23 : \",condata);\r\n\r\n//             //     setData({\r\n//             //         citydata:condata,\r\n//             //         loads:json,\r\n//             //     })\r\n\r\n//             // //    })\r\n//             //  })\r\n\r\n//         let TrucksURL=\"https://alphalionserver.herokuapp.com/gettruckssdata\"; \r\n\r\n//         // fetch(TrucksURL,{method:'POST'})\r\n//         // .then((res) => res.json())\r\n//         // .then(async (json) => { \r\n//         //     console.log(\"json : \",json);        \r\n//         // })\r\n\r\n\r\n//         // socket.emit(\"joinclient\",{id:'hemant'})\r\n\r\n//         // socket.on(\"joined\",(data)=>{\r\n//         //     console.log(\"socket data :\",data);\r\n\r\n//         //     socket.emit(\"getdata\",{id:'hemant'});\r\n//         // })\r\n\r\n//         // socket.on(\"setdata\",(data)=>{\r\n//         //     console.log(\"sch :\",data);\r\n//         // })\r\n\r\n\r\n\r\n//         // const colRef = collection(db, 'LoadEntries');\r\n//         // const unsubListener = onSnapshot(colRef, async snapshot => { \r\n//         //     let arr = [];\r\n//         //     await snapshot.docs.map(doc => { \r\n//         //         let obj = {\r\n//         //             id: doc.id,\r\n//         //             data: doc.data()\r\n//         //         };\r\n//         //         arr.push(obj)\r\n//         //     })\r\n//         //   await  sorted(arr).then((data) => {\r\n//         //         setLoads(data);\r\n//         //     })\r\n//         // });\r\n\r\n//     }\r\n\r\n//     // useEffect(() => {\r\n//     //     let condata = conditionFilter()\r\n\r\n//     //     // setCitydata(condata);\r\n\r\n//     //     console.log(\"changes in database\");\r\n\r\n//     // }, [loads])\r\n\r\n//     useEffect(() => {\r\n//         fetchData();\r\n//     }, []);\r\n\r\n\r\n//     return (\r\n//         <div className=\"SearchContainerbox\">\r\n//             <SearchInput setInputLeft={setInputLeft} inputleft={inputleft} inputright={inputright} setInputRight={setInputRight}></SearchInput>\r\n//             {/* <div className=\"expand-all-btn\">\r\n//               <button>{button}</button>\r\n//             </div> */}\r\n//             {/* <SearchResult citydata={data.citydata} inputcity={inputleft} trucks={data.citytrucks}></SearchResult> */}\r\n//             {/* <UsualPage loads={data.loads}></UsualPage> */}\r\n//         </div>\r\n//     );\r\n\r\n// }\r\n\r\nconst s= () =>{\r\n    console.log(\"this is by container\");\r\n\r\n    return(\r\n        <div>\r\n            this is sample\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default s;"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB;AACA;AACA;AACA,SAASC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAGA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA;AAEA,MAAMC,CAAC,GAAE,MAAK;EACVC,OAAO,CAACC,GAAG,CAAC,sBAAsB,CAAC;EAEnC,oBACI;IAAA;EAAA;IAAA;IAAA;IAAA;EAAA,QAEM;AAEd,CAAC;AAED,eAAeF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}