{"ast":null,"code":"var _jsxFileName = \"/Users/hemantsingh/code/SCHwire1.1/schwire1811/src/components/SearchContainer.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport SearchInput from './SearchInput';\nimport SearchResult from './SearchResult';\nimport UsualPage from \"./UsualPage\";\nimport { useState, useEffect } from 'react';\nimport { Manager } from 'socket.io-client';\n\n// let url='http://localhost:9900'\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet url = 'https://alphalionserver.herokuapp.com';\nconst manager = new Manager(url);\nconst socket = manager.socket(\"/SCH\");\nconst SearchContainer = () => {\n  _s();\n  socket.on(\"disconnect\", () => {\n    console.log(\"disconnect\");\n    socket.emit(\"joinclient\", {\n      id: \"hemant\"\n    });\n  });\n  socket.on(\"connect\", () => {\n    console.log(\"connect\");\n    socket.emit(\"joinclient\", {\n      id: \"hemant\"\n    });\n  });\n  socket.on(\"SCHDATA\", data => {\n    // console.log(\"changes in db\");\n    // console.log(data);\n    // console.log(\"datareal : \",data);\n    // let jsondata=JSON.parse(data)\n    // console.log(\"datarealJson : \",jsondata);\n\n    setrealtimedata(data);\n    setrealtime(old => 1 - old);\n  });\n  socket.on(\"SCHTRUCKDATA\", data => {\n    // console.log(\"truck data : \",data);\n    console.log(\"change in db\");\n    setrealtimetrucks(data);\n    setrealtime(old => 1 - old);\n  });\n  let [realtimedata, setrealtimedata] = useState([]);\n  let [realtimetrucks, setrealtimetrucks] = useState([]);\n  let [inputleft, setInputLeft] = useState([\"\"]);\n  let [inputright, setInputRight] = useState([\"\"]);\n  let [realtime, setrealtime] = useState(0);\n  const [button, setbutton] = useState(\"Expand\");\n\n  // var [loads, setLoads] = useState([])\n  // let [citydata, setCitydata] = useState();\n\n  let [data, setData] = useState({\n    citydata: {},\n    loads: {},\n    citytrucks: {},\n    trucks: {}\n  });\n  let belongs = async (arr, state) => {\n    let found = false;\n    arr.map(item => {\n      if (item != '') {\n        let item1 = item.slice(0, 2);\n        if (state == item1) {\n          found = true;\n        }\n      }\n    });\n    return found;\n  };\n\n  // const conditionFilter =  (loads) => {\n\n  //     try{\n  //         let filterdata = []; \n  //          loads.map(async (el) =>{\n  //             // console.log(el.data.shipper_state,\" , \",el.data.receiver_state);\n  //             if (el.data.shipper_state == null || el.data.shipper_state == undefined || el.data.receiver_state == null || el.data.receiver_state == undefined) return;\n\n  //             let left = await belongs(inputleft, el.data.shipper_state);\n  //             let right = await belongs(inputright, el.data.receiver_state);\n\n  //             if (left &&  right) { \n  //                  filterdata.push(el);\n  //             }\n\n  //         })\n\n  //         // console.log(\"left : \",inputleft);\n  //         // console.log(\"rihgt : \",inputright);\n\n  //         let truckfilter=[];\n  //           trucksdata.map(async (el)=>{\n\n  //             let found =await belongs(inputleft,el.loadData.receiver_state[0])\n\n  //             if(found)\n  //             {\n  //                 console.log(\"state : \",el.loadData.receiver_state[0]);\n  //                 truckfilter.push(el);\n  //             }\n\n  //         })\n\n  //         return filterdata;\n  //     }catch(err){\n  //         return [];\n  //     }\n  //  }\n\n  const conditionFilter = async (loads, trucks) => {\n    console.log(\"loads : \", loads);\n    console.log(\"trucks : \", trucks);\n    if (loads == undefined || trucks == undefined) {\n      let data = {\n        loads: {},\n        trucks: {}\n      };\n      return data;\n    }\n\n    // return new Promise(async function(resolve,reject){\n    try {\n      let filterdata = [];\n      await loads.map(async el => {\n        // console.log(el.data.shipper_state,\" , \",el.data.receiver_state);\n        if (el.data.shipper_state == null || el.data.shipper_state == undefined || el.data.receiver_state == null || el.data.receiver_state == undefined) return;\n        let left = await belongs(inputleft, el.data.shipper_state);\n        let right = await belongs(inputright, el.data.receiver_state);\n        if (left && right) {\n          filterdata.push(el);\n        }\n      });\n      let filtertrucks = [];\n      await trucks.map(async el => {\n        if (el.data == undefined || el.data.truckCurrentState == undefined || el.data.truckCurrentState.receiver_state == undefined) {\n          console.log(\"undef\");\n          return;\n        }\n\n        // console.log(\"re \", el.data.truckCurrentState.receiver_state[0]);\n\n        let belong = await belongs(inputleft, el.data.truckCurrentState.receiver_state[0]);\n        if (belong) {\n          console.log(\"belongsssssss\");\n          filtertrucks.push(el);\n        }\n      });\n\n      // console.log(\"left : \",inputleft);\n      // console.log(\"rihgt : \",inputright);\n\n      // let truckfilter = [];\n      // trucksdata.map(async (el) => {\n\n      //     let found = await belongs(inputleft, el.loadData.receiver_state[0])\n\n      //     if (found) {\n      //         console.log(\"state : \", el.loadData.receiver_state[0]);\n      //         truckfilter.push(el);\n      //     }\n\n      // })\n      console.log(\"trucks on func : \", filtertrucks);\n      let data = {\n        loads: filterdata,\n        trucks: filtertrucks\n      };\n      return data;\n\n      // resolve(data);\n    } catch (err) {\n      console.log(\"this is returning from \");\n      let data = {\n        loads: {},\n        trucks: {}\n      };\n      return data;\n      // reject(data);\n    }\n    //    })\n  };\n\n  useEffect(() => {\n    console.log(\"data : for input change\");\n    // console.log(\"daa \", data);\n    if (data != undefined && data.loads != undefined && data.loads.length != 0) {\n      console.log(\"data.trucks : \", data.trucks);\n      conditionFilter(data.loads, data.trucks).then(condata => {\n        console.log(\"task done\");\n        console.log(\"condata : \", condata);\n        if (condata != undefined) {\n          console.log(\"condata : \");\n          console.log(\"condata : \", condata);\n          setData({\n            citydata: condata.loads,\n            loads: data.loads,\n            citytrucks: condata.trucks,\n            trucks: data.trucks\n          });\n        }\n      });\n    }\n  }, [inputleft, inputright]);\n  function Comparator(a, b) {\n    if (a.data.PU_date == undefined) return -1;\n    if (a.data.PU_date >= b.data.PU_date) return 1;else return -1;\n  }\n  async function sorted(arr) {\n    return new Promise(async function (resolve, reject) {\n      if (arr == undefined) {\n        resolve(arr);\n        return;\n      }\n      let aar = await arr.sort(Comparator);\n      resolve(aar);\n    });\n  }\n  const update = async () => {\n    // sorted(realtimedata).then(async (sorteddata) => { \n    await conditionFilter(realtimedata, realtimetrucks).then(condata => {\n      // console.log(\"json : \",json[0]);\n\n      let JsonObject = JSON.parse(JSON.stringify(condata));\n      console.log(\"JJJ : \", JsonObject);\n      console.log(\"condata : \", condata);\n      // console.log(\"typeof  : \", typeof condata);\n      console.log(\"cacaasdc\");\n      setData({\n        citydata: condata.trucks,\n        loads: realtimedata,\n        trucks: data.trucks,\n        citytrucks: condata.citytrucks\n      });\n    });\n    //    })\n  };\n\n  useEffect(() => {\n    update();\n  }, [realtime]);\n  const fetchData = () => {\n    console.log(\"calling\");\n\n    // let LoadsURL=\"https://alphalionserver.herokuapp.com/getloadsdata\"; \n\n    let schdataURL = url + \"/getSCHdata\";\n    fetch(schdataURL, {\n      method: 'POST'\n    }).then(res => res.json()).then(async json => {\n      let loads = json.loads;\n      let trucks = json.trucks;\n      console.log(\"loadsfet : \", loads);\n      console.log(\"trucksfet  : \", trucks);\n      let condata = await conditionFilter(loads, trucks);\n      // .then((data)=>{\n      //     condata=data;\n      // }).catch((errdata)=>{\n      //     condata=data;\n      // })\n\n      // setData({\n      //     citydata:condata,\n      //     loads:loads\n      // })\n\n      console.log(\"data.trucks : \", condata.trucks);\n      setData({\n        citydata: condata.loads,\n        loads: loads,\n        citytrucks: condata.trucks,\n        trucks: trucks\n      });\n\n      // console.log(\"data : \",data);\n\n      // let condata = conditionFilter(loads) \n    });\n\n    // fetch(LoadsURL,{method:'POST'})\n    //     .then((res) => res.json())\n    //     .then(async (json) => { \n    // //   sorted(json).then(async (sorteddata) => {\n    //     // console.log(\"sorted :\",sorteddata)\n\n    //     let condata = conditionFilter(json)  \n\n    //     console.log(\"data23 : \",condata);\n\n    //     setData({\n    //         citydata:condata,\n    //         loads:json,\n    //     })\n\n    // //    })\n    //  })\n\n    let TrucksURL = \"https://alphalionserver.herokuapp.com/gettruckssdata\";\n\n    // fetch(TrucksURL,{method:'POST'})\n    // .then((res) => res.json())\n    // .then(async (json) => { \n    //     console.log(\"json : \",json);        \n    // })\n\n    // socket.emit(\"joinclient\",{id:'hemant'})\n\n    // socket.on(\"joined\",(data)=>{\n    //     console.log(\"socket data :\",data);\n\n    //     socket.emit(\"getdata\",{id:'hemant'});\n    // })\n\n    // socket.on(\"setdata\",(data)=>{\n    //     console.log(\"sch :\",data);\n    // })\n\n    // const colRef = collection(db, 'LoadEntries');\n    // const unsubListener = onSnapshot(colRef, async snapshot => { \n    //     let arr = [];\n    //     await snapshot.docs.map(doc => { \n    //         let obj = {\n    //             id: doc.id,\n    //             data: doc.data()\n    //         };\n    //         arr.push(obj)\n    //     })\n    //   await  sorted(arr).then((data) => {\n    //         setLoads(data);\n    //     })\n    // });\n  };\n\n  // useEffect(() => {\n  //     let condata = conditionFilter()\n\n  //     // setCitydata(condata);\n\n  //     console.log(\"changes in database\");\n\n  // }, [loads])\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"SearchContainerbox\",\n    children: [/*#__PURE__*/_jsxDEV(SearchInput, {\n      setInputLeft: setInputLeft,\n      inputleft: inputleft,\n      inputright: inputright,\n      setInputRight: setInputRight\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 404,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(SearchResult, {\n      citydata: data.citydata,\n      inputcity: inputleft,\n      trucks: data.citytrucks\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 408,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 403,\n    columnNumber: 9\n  }, this);\n};\n_s(SearchContainer, \"D7S6sw+OH7IfgMYWm4RokO5n5+Q=\");\n_c = SearchContainer;\nconst s = () => {\n  console.log(\"this is by container\");\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"this is sample\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 419,\n    columnNumber: 9\n  }, this);\n};\nexport default SearchContainer;\nvar _c;\n$RefreshReg$(_c, \"SearchContainer\");","map":{"version":3,"names":["React","SearchInput","SearchResult","UsualPage","useState","useEffect","Manager","url","manager","socket","SearchContainer","on","console","log","emit","id","data","setrealtimedata","setrealtime","old","setrealtimetrucks","realtimedata","realtimetrucks","inputleft","setInputLeft","inputright","setInputRight","realtime","button","setbutton","setData","citydata","loads","citytrucks","trucks","belongs","arr","state","found","map","item","item1","slice","conditionFilter","undefined","filterdata","el","shipper_state","receiver_state","left","right","push","filtertrucks","truckCurrentState","belong","err","length","then","condata","Comparator","a","b","PU_date","sorted","Promise","resolve","reject","aar","sort","update","JsonObject","JSON","parse","stringify","fetchData","schdataURL","fetch","method","res","json","TrucksURL","s"],"sources":["/Users/hemantsingh/code/SCHwire1.1/schwire1811/src/components/SearchContainer.js"],"sourcesContent":["import React from 'react'\r\nimport SearchInput from './SearchInput';\r\nimport SearchResult from './SearchResult';\r\nimport UsualPage from \"./UsualPage\";\r\nimport { useState, useEffect } from 'react';\r\nimport { Manager } from 'socket.io-client'; \r\n\r\n// let url='http://localhost:9900'\r\nlet url='https://alphalionserver.herokuapp.com'\r\nconst manager=new Manager(url)\r\nconst socket = manager.socket(\"/SCH\"); \r\n\r\nconst SearchContainer = () => {\r\n\r\n    socket.on(\"disconnect\",()=>{\r\n        console.log(\"disconnect\");\r\n        socket.emit(\"joinclient\",{\r\n            id:\"hemant\"\r\n        })\r\n    })\r\n\r\n    socket.on(\"connect\",()=>{\r\n        console.log(\"connect\");\r\n\r\n        socket.emit(\"joinclient\",{\r\n            id:\"hemant\"\r\n        })\r\n    })\r\n\r\n    socket.on(\"SCHDATA\",(data)=>{\r\n        \r\n        // console.log(\"changes in db\");\r\n        // console.log(data);\r\n        // console.log(\"datareal : \",data);\r\n        // let jsondata=JSON.parse(data)\r\n        // console.log(\"datarealJson : \",jsondata);\r\n\r\n        setrealtimedata(data);\r\n        setrealtime((old)=>1-old);\r\n    })\r\n\r\n    socket.on(\"SCHTRUCKDATA\",(data)=>{\r\n        // console.log(\"truck data : \",data);\r\n        console.log(\"change in db\");\r\n\r\n        setrealtimetrucks(data);\r\n        setrealtime((old)=>1-old);\r\n    })\r\n\r\n    let [realtimedata,setrealtimedata]=useState([]);\r\n    let [realtimetrucks,setrealtimetrucks]=useState([]);\r\n    let [inputleft, setInputLeft] = useState([\"\"]);\r\n    let [inputright, setInputRight] = useState([\"\"]);\r\n    let [realtime,setrealtime]=useState(0);\r\n    \r\n\r\n    const [button,setbutton]=useState(\"Expand\");\r\n\r\n\r\n    // var [loads, setLoads] = useState([])\r\n    // let [citydata, setCitydata] = useState();\r\n \r\n    let [data, setData] = useState({ citydata: {}, loads: {},citytrucks:{}, trucks:{} });\r\n\r\n    let belongs = async (arr, state) => { \r\n        let found = false;\r\n\r\n        arr.map((item) => { \r\n            if(item!=''){\r\n            let item1 = item.slice(0, 2);\r\n            if (state == item1) {\r\n                found = true;\r\n            }\r\n        }\r\n        })\r\n\r\n        return found;\r\n    }\r\n\r\n    // const conditionFilter =  (loads) => {\r\n\r\n    //     try{\r\n    //         let filterdata = []; \r\n    //          loads.map(async (el) =>{\r\n    //             // console.log(el.data.shipper_state,\" , \",el.data.receiver_state);\r\n    //             if (el.data.shipper_state == null || el.data.shipper_state == undefined || el.data.receiver_state == null || el.data.receiver_state == undefined) return;\r\n    \r\n    //             let left = await belongs(inputleft, el.data.shipper_state);\r\n    //             let right = await belongs(inputright, el.data.receiver_state);\r\n    \r\n    //             if (left &&  right) { \r\n    //                  filterdata.push(el);\r\n    //             }\r\n\r\n    //         })\r\n\r\n    //         // console.log(\"left : \",inputleft);\r\n    //         // console.log(\"rihgt : \",inputright);\r\n            \r\n    //         let truckfilter=[];\r\n    //           trucksdata.map(async (el)=>{\r\n\r\n    //             let found =await belongs(inputleft,el.loadData.receiver_state[0])\r\n\r\n    //             if(found)\r\n    //             {\r\n    //                 console.log(\"state : \",el.loadData.receiver_state[0]);\r\n    //                 truckfilter.push(el);\r\n    //             }\r\n\r\n    //         })\r\n      \r\n    //         return filterdata;\r\n    //     }catch(err){\r\n    //         return [];\r\n    //     }\r\n    //  }\r\n\r\n     const conditionFilter = async (loads,trucks) => {\r\n\r\n        console.log(\"loads : \",loads);\r\n        console.log(\"trucks : \",trucks);\r\n\r\n        if(loads==undefined || trucks==undefined){ \r\n            let data={\r\n                loads:{},\r\n                trucks:{}\r\n            }\r\n            return data;\r\n        }\r\n\r\n        // return new Promise(async function(resolve,reject){\r\n        try { \r\n          let filterdata = [];\r\n\r\n          await loads.map(async (el) => {\r\n                // console.log(el.data.shipper_state,\" , \",el.data.receiver_state);\r\n                if (el.data.shipper_state == null || el.data.shipper_state == undefined || el.data.receiver_state == null || el.data.receiver_state == undefined) return;\r\n\r\n                let left = await belongs(inputleft, el.data.shipper_state);\r\n                let right = await belongs(inputright, el.data.receiver_state);\r\n\r\n                if (left && right) {\r\n                    filterdata.push(el);\r\n                }\r\n\r\n            })\r\n\r\n          let filtertrucks = [];\r\n\r\n          await trucks.map(async (el) => {\r\n\r\n            if (el.data==undefined || el.data.truckCurrentState==undefined || el.data.truckCurrentState.receiver_state == undefined) {\r\n                    console.log(\"undef\");\r\n                    return;\r\n            }\r\n\r\n            // console.log(\"re \", el.data.truckCurrentState.receiver_state[0]);\r\n\r\n            let belong =await belongs(inputleft, el.data.truckCurrentState.receiver_state[0])\r\n\r\n            if (belong) {\r\n                console.log(\"belongsssssss\");\r\n                filtertrucks.push(el);\r\n            }\r\n\r\n            })\r\n\r\n            // console.log(\"left : \",inputleft);\r\n            // console.log(\"rihgt : \",inputright);\r\n\r\n            // let truckfilter = [];\r\n            // trucksdata.map(async (el) => {\r\n\r\n            //     let found = await belongs(inputleft, el.loadData.receiver_state[0])\r\n\r\n            //     if (found) {\r\n            //         console.log(\"state : \", el.loadData.receiver_state[0]);\r\n            //         truckfilter.push(el);\r\n            //     }\r\n\r\n            // })\r\n            console.log(\"trucks on func : \",filtertrucks);\r\n\r\n          let data={\r\n                loads:filterdata,\r\n                trucks:filtertrucks\r\n            }\r\n\r\n          return data;\r\n\r\n          // resolve(data);\r\n\r\n        } \r\n        catch (err) {\r\n\r\n          console.log(\"this is returning from \");\r\n\r\n          let data={\r\n            loads:{},\r\n            trucks:{}\r\n           }\r\n\r\n            return data;\r\n            // reject(data);\r\n        }\r\n    //    })\r\n  }\r\n\r\n    useEffect(() => {\r\n        console.log(\"data : for input change\");\r\n        // console.log(\"daa \", data);\r\n        if( data!=undefined && data.loads!=undefined && data.loads.length!=0)\r\n        {\r\n         console.log(\"data.trucks : \",data.trucks);\r\n        conditionFilter(data.loads,data.trucks).then((condata)=>{\r\n            console.log(\"task done\");\r\n        \r\n        console.log(\"condata : \",condata);\r\n\r\n        if(condata!=undefined) {\r\n\r\n        console.log(\"condata : \");\r\n        console.log(\"condata : \",condata);\r\n\r\n        setData({\r\n            citydata:condata.loads,\r\n            loads:data.loads,\r\n            citytrucks:condata.trucks,\r\n            trucks:data.trucks\r\n        })\r\n        \r\n\r\n        }\r\n           })\r\n    }\r\n    }, [inputleft, inputright])\r\n\r\n    function Comparator(a, b) {\r\n        if(a.data.PU_date == undefined) return -1;\r\n\r\n        if(a.data.PU_date>= b.data.PU_date) return 1;\r\n        else return -1;\r\n\r\n    }\r\n\r\n    async function sorted(arr) { \r\n        return new Promise(async function (resolve, reject) {\r\n            if(arr==undefined)\r\n            {\r\n             resolve(arr);\r\n             return;   \r\n            } \r\n            let aar = await arr.sort(Comparator);\r\n            resolve(aar);\r\n        })\r\n    }\r\n\r\n    const update=async ()=>{\r\n        // sorted(realtimedata).then(async (sorteddata) => { \r\n            await conditionFilter(realtimedata,realtimetrucks).then((condata)=>{  \r\n            // console.log(\"json : \",json[0]);\r\n\r\n          let  JsonObject = JSON.parse(JSON.stringify(condata));\r\n\r\n          console.log(\"JJJ : \",JsonObject);\r\n            console.log(\"condata : \",condata);\r\n            // console.log(\"typeof  : \", typeof condata);\r\n            console.log(\"cacaasdc\");\r\n            setData({\r\n                citydata:condata.trucks,\r\n                loads:realtimedata,\r\n                trucks:data.trucks,\r\n                citytrucks:condata.citytrucks\r\n            })\r\n        })\r\n        //    })\r\n    }\r\n\r\n    useEffect(()=>{\r\n        update()\r\n    },[realtime])\r\n\r\n    const fetchData = () => {\r\n        console.log(\"calling\");\r\n\r\n        // let LoadsURL=\"https://alphalionserver.herokuapp.com/getloadsdata\"; \r\n        \r\n        let schdataURL=url+\"/getSCHdata\";\r\n\r\n        fetch(schdataURL,{method:'POST'})\r\n                .then((res) => res.json())\r\n                .then(async (json) => {\r\n\r\n                    let loads=json.loads;\r\n                    let trucks=json.trucks;\r\n\r\n                    console.log(\"loadsfet : \",loads);\r\n                    console.log(\"trucksfet  : \",trucks);\r\n                    \r\n                    let condata= await conditionFilter(loads,trucks)\r\n                    // .then((data)=>{\r\n                    //     condata=data;\r\n                    // }).catch((errdata)=>{\r\n                    //     condata=data;\r\n                    // })\r\n                    \r\n\r\n                    // setData({\r\n                    //     citydata:condata,\r\n                    //     loads:loads\r\n                    // })\r\n\r\n                    console.log(\"data.trucks : \",condata.trucks);\r\n\r\n\r\n                    setData({\r\n                        citydata:condata.loads,\r\n                        loads:loads,\r\n                        citytrucks:condata.trucks,\r\n                        trucks:trucks\r\n                    })\r\n\r\n                    // console.log(\"data : \",data);\r\n\r\n\r\n                    // let condata = conditionFilter(loads) \r\n                 })\r\n\r\n            // fetch(LoadsURL,{method:'POST'})\r\n            //     .then((res) => res.json())\r\n            //     .then(async (json) => { \r\n            // //   sorted(json).then(async (sorteddata) => {\r\n            //     // console.log(\"sorted :\",sorteddata)\r\n\r\n            //     let condata = conditionFilter(json)  \r\n\r\n            //     console.log(\"data23 : \",condata);\r\n\r\n            //     setData({\r\n            //         citydata:condata,\r\n            //         loads:json,\r\n            //     })\r\n\r\n            // //    })\r\n            //  })\r\n\r\n        let TrucksURL=\"https://alphalionserver.herokuapp.com/gettruckssdata\"; \r\n\r\n        // fetch(TrucksURL,{method:'POST'})\r\n        // .then((res) => res.json())\r\n        // .then(async (json) => { \r\n        //     console.log(\"json : \",json);        \r\n        // })\r\n\r\n\r\n        // socket.emit(\"joinclient\",{id:'hemant'})\r\n\r\n        // socket.on(\"joined\",(data)=>{\r\n        //     console.log(\"socket data :\",data);\r\n\r\n        //     socket.emit(\"getdata\",{id:'hemant'});\r\n        // })\r\n\r\n        // socket.on(\"setdata\",(data)=>{\r\n        //     console.log(\"sch :\",data);\r\n        // })\r\n\r\n\r\n\r\n        // const colRef = collection(db, 'LoadEntries');\r\n        // const unsubListener = onSnapshot(colRef, async snapshot => { \r\n        //     let arr = [];\r\n        //     await snapshot.docs.map(doc => { \r\n        //         let obj = {\r\n        //             id: doc.id,\r\n        //             data: doc.data()\r\n        //         };\r\n        //         arr.push(obj)\r\n        //     })\r\n        //   await  sorted(arr).then((data) => {\r\n        //         setLoads(data);\r\n        //     })\r\n        // });\r\n\r\n    }\r\n\r\n    // useEffect(() => {\r\n    //     let condata = conditionFilter()\r\n\r\n    //     // setCitydata(condata);\r\n\r\n    //     console.log(\"changes in database\");\r\n\r\n    // }, [loads])\r\n\r\n    useEffect(() => {\r\n        fetchData();\r\n    }, []);\r\n\r\n\r\n    return (\r\n        <div className=\"SearchContainerbox\">\r\n            <SearchInput setInputLeft={setInputLeft} inputleft={inputleft} inputright={inputright} setInputRight={setInputRight}></SearchInput>\r\n            {/* <div className=\"expand-all-btn\">\r\n              <button>{button}</button>\r\n            </div> */}\r\n            <SearchResult citydata={data.citydata} inputcity={inputleft} trucks={data.citytrucks}></SearchResult>\r\n            {/* <UsualPage loads={data.loads}></UsualPage> */}\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nconst s= () =>{\r\n    console.log(\"this is by container\");\r\n\r\n    return(\r\n        <div>\r\n            this is sample\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchContainer;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}